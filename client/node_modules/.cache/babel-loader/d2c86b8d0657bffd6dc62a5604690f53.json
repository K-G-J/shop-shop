{"ast":null,"code":"import _slicedToArray from\"/Users/katejohnson/Desktop/shop-shop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect}from'react';import{useQuery}from'@apollo/client';import{QUERY_CATEGORIES}from'../../utils/queries';import{UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY}from'../../utils/actions';import{useStoreContext}from'../../utils/GlobalState';import{idbPromise}from'../../utils/helpers';function CategoryMenu(){var _useStoreContext=useStoreContext(),_useStoreContext2=_slicedToArray(_useStoreContext,2),state=_useStoreContext2[0],dispatch=_useStoreContext2[1];var categories=state.categories;var _useQuery=useQuery(QUERY_CATEGORIES),loading=_useQuery.loading,categoryData=_useQuery.data;useEffect(function(){// if categoryData exists or has changed from the response of useQuery, then run dispatch()\nif(categoryData){// execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\ndispatch({type:UPDATE_CATEGORIES,categories:categoryData.categories});categoryData.categories.forEach(function(category){idbPromise('categories','put',category);});}else if(!loading){idbPromise('categories','get').then(function(categories){dispatch({type:UPDATE_CATEGORIES,categories:categories});});}},[categoryData,loading,dispatch]);var handleClick=function handleClick(id){dispatch({type:UPDATE_CURRENT_CATEGORY,currentCategory:id});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Choose a Category:\"),categories.map(function(item){return/*#__PURE__*/React.createElement(\"button\",{key:item._id,onClick:function onClick(){handleClick(item._id);}},item.name);}));}export default CategoryMenu;","map":{"version":3,"sources":["/Users/katejohnson/Desktop/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","QUERY_CATEGORIES","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","useStoreContext","idbPromise","CategoryMenu","state","dispatch","categories","loading","categoryData","data","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":"kKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,OAASC,iBAAT,CAA4BC,uBAA5B,KAA2D,qBAA3D,CACA,OAASC,eAAT,KAAgC,yBAAhC,CACA,OAASC,UAAT,KAA2B,qBAA3B,CAEA,QAASC,CAAAA,YAAT,EAAwB,CACtB,qBAA0BF,eAAe,EAAzC,sDAAOG,KAAP,sBAAcC,QAAd,sBAEA,GAAQC,CAAAA,UAAR,CAAuBF,KAAvB,CAAQE,UAAR,CAEA,cAAwCT,QAAQ,CAACC,gBAAD,CAAhD,CAAQS,OAAR,WAAQA,OAAR,CAAuBC,YAAvB,WAAiBC,IAAjB,CAEAb,SAAS,CAAC,UAAM,CACd;AACA,GAAIY,YAAJ,CAAkB,CAChB;AACAH,QAAQ,CAAC,CACPK,IAAI,CAAEX,iBADC,CAEPO,UAAU,CAAEE,YAAY,CAACF,UAFlB,CAAD,CAAR,CAIAE,YAAY,CAACF,UAAb,CAAwBK,OAAxB,CAAgC,SAAAC,QAAQ,CAAI,CAC1CV,UAAU,CAAC,YAAD,CAAe,KAAf,CAAsBU,QAAtB,CAAV,CACD,CAFD,EAGD,CATD,IASO,IAAI,CAACL,OAAL,CAAc,CACnBL,UAAU,CAAC,YAAD,CAAe,KAAf,CAAV,CAAgCW,IAAhC,CAAqC,SAAAP,UAAU,CAAI,CACjDD,QAAQ,CAAC,CACPK,IAAI,CAAEX,iBADC,CAEPO,UAAU,CAAEA,UAFL,CAAD,CAAR,CAID,CALD,EAMD,CACF,CAnBQ,CAmBN,CAACE,YAAD,CAAeD,OAAf,CAAwBF,QAAxB,CAnBM,CAAT,CAqBA,GAAMS,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,EAAE,CAAI,CACxBV,QAAQ,CAAC,CACPK,IAAI,CAAEV,uBADC,CAEPgB,eAAe,CAAED,EAFV,CAAD,CAAR,CAID,CALD,CAOA,mBACE,4CACE,mDADF,CAEGT,UAAU,CAACW,GAAX,CAAe,SAACC,IAAD,qBACd,8BACE,GAAG,CAAEA,IAAI,CAACC,GADZ,CAEE,OAAO,CAAE,kBAAM,CACbL,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX,CACD,CAJH,EAMGD,IAAI,CAACE,IANR,CADc,EAAf,CAFH,CADF,CAeD,CAED,cAAejB,CAAAA,YAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { QUERY_CATEGORIES } from '../../utils/queries'\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions'\nimport { useStoreContext } from '../../utils/GlobalState'\nimport { idbPromise } from '../../utils/helpers'\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext()\n\n  const { categories } = state\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES)\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      })\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category)\n      })\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        })\n      })\n    }\n  }, [categoryData, loading, dispatch])\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    })\n  }\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nexport default CategoryMenu\n"]},"metadata":{},"sourceType":"module"}