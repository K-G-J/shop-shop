{"ast":null,"code":"var _jsxFileName = \"/Users/katejohnson/Desktop/shop-shop/client/src/components/CategoryMenu/index.js\";\nimport { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useStoreContext } from '../../utils/storeContext';\n\nfunction CategoryMenu(_ref) {\n  let {\n    setCategory\n  } = _ref;\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n    }\n  }, [categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({});\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      setCategory(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["/Users/katejohnson/Desktop/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["useEffect","useQuery","QUERY_CATEGORIES","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","useStoreContext","CategoryMenu","setCategory","state","dispatch","categories","data","categoryData","type","handleClick","id","map","item","_id","name"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAAQC,iBAAR,EAA2BC,uBAA3B,QAAyD,qBAAzD;AACA,SAASC,eAAT,QAAgC,0BAAhC;;AAEA,SAASC,YAAT,OAAuC;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,eAAe,EAAzC;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAAiBF,KAAvB;AAEA,QAAM;AAAEG,IAAAA,IAAI,EAAEC;AAAR,MAAyBX,QAAQ,CAACC,gBAAD,CAAvC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIY,YAAJ,EAAkB;AAChB;AACAH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEV,iBADC;AAEPO,QAAAA,UAAU,EAAEE,YAAY,CAACF;AAFlB,OAAD,CAAR;AAID;AACF,GATQ,EASN,CAACE,YAAD,EAAeH,QAAf,CATM,CAAT;;AAWA,QAAMK,WAAW,GAAGC,EAAE,IAAI;AACxBN,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAFD;;AAIA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGC,UAAU,CAACM,GAAX,CAAgBC,IAAD,iBACd;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbX,MAAAA,WAAW,CAACU,IAAI,CAACC,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAeb,YAAf","sourcesContent":["import { useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { QUERY_CATEGORIES } from '../../utils/queries'\nimport {UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY} from '../../utils/actions'\nimport { useStoreContext } from '../../utils/storeContext'\n\nfunction CategoryMenu({ setCategory }) {\n  const [state, dispatch] = useStoreContext()\n\n  const { categories } = state\n\n  const { data: categoryData } = useQuery(QUERY_CATEGORIES)\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      })\n    }\n  }, [categoryData, dispatch])\n\n  const handleClick = id => {\n    dispatch({})\n  }\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            setCategory(item._id)\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nexport default CategoryMenu\n"]},"metadata":{},"sourceType":"module"}